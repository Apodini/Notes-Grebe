//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: notes.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate NotesServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol NotesServiceService {
  func createNote(_ request: CreateNoteRequest, callOptions: CallOptions?) -> UnaryCall<CreateNoteRequest, CreateNoteResponse>
  func deleteNotes(callOptions: CallOptions?) -> ClientStreamingCall<DeleteNotesRequest, DeleteNotesResponse>
  func getNotes(_ request: GetNotesRequest, callOptions: CallOptions?, handler: @escaping (GetNotesResponse) -> Void) -> ServerStreamingCall<GetNotesRequest, GetNotesResponse>
  func switchTitleContent(callOptions: CallOptions?, handler: @escaping (SwitchTitleContentResponse) -> Void) -> BidirectionalStreamingCall<SwitchTitleContentRequest, SwitchTitleContentResponse>
}

internal final class NotesServiceServiceClient: GRPCClient, NotesServiceService {
  internal let connection: ClientConnection
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the NotesService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to CreateNote.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateNote.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createNote(_ request: CreateNoteRequest, callOptions: CallOptions? = nil) -> UnaryCall<CreateNoteRequest, CreateNoteResponse> {
    return self.makeUnaryCall(path: "/NotesService/CreateNote",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous client-streaming call to DeleteNotes.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func deleteNotes(callOptions: CallOptions? = nil) -> ClientStreamingCall<DeleteNotesRequest, DeleteNotesResponse> {
    return self.makeClientStreamingCall(path: "/NotesService/DeleteNotes",
                                        callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to GetNotes.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNotes.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getNotes(_ request: GetNotesRequest, callOptions: CallOptions? = nil, handler: @escaping (GetNotesResponse) -> Void) -> ServerStreamingCall<GetNotesRequest, GetNotesResponse> {
    return self.makeServerStreamingCall(path: "/NotesService/GetNotes",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous bidirectional-streaming call to SwitchTitleContent.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func switchTitleContent(callOptions: CallOptions? = nil, handler: @escaping (SwitchTitleContentResponse) -> Void) -> BidirectionalStreamingCall<SwitchTitleContentRequest, SwitchTitleContentResponse> {
    return self.makeBidirectionalStreamingCall(path: "/NotesService/SwitchTitleContent",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol NotesServiceProvider: CallHandlerProvider {
  func createNote(request: CreateNoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CreateNoteResponse>
  func deleteNotes(context: UnaryResponseCallContext<DeleteNotesResponse>) -> EventLoopFuture<(StreamEvent<DeleteNotesRequest>) -> Void>
  func getNotes(request: GetNotesRequest, context: StreamingResponseCallContext<GetNotesResponse>) -> EventLoopFuture<GRPCStatus>
  func switchTitleContent(context: StreamingResponseCallContext<SwitchTitleContentResponse>) -> EventLoopFuture<(StreamEvent<SwitchTitleContentRequest>) -> Void>
}

extension NotesServiceProvider {
  internal var serviceName: String { return "NotesService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateNote":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createNote(request: request, context: context)
        }
      }

    case "DeleteNotes":
      return ClientStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return self.deleteNotes(context: context)
      }

    case "GetNotes":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getNotes(request: request, context: context)
        }
      }

    case "SwitchTitleContent":
      return BidirectionalStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return self.switchTitleContent(context: context)
      }

    default: return nil
    }
  }
}

